#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class SenderType(object):
    USER = 0
    ANA = 1
    AI = 2
    AGENT = 3

    _VALUES_TO_NAMES = {
        0: "USER",
        1: "ANA",
        2: "AI",
        3: "AGENT",
    }

    _NAMES_TO_VALUES = {
        "USER": 0,
        "ANA": 1,
        "AI": 2,
        "AGENT": 3,
    }


class MediaType(object):
    IMAGE = 0
    AUDIO = 1
    VIDEO = 3
    FILE = 4

    _VALUES_TO_NAMES = {
        0: "IMAGE",
        1: "AUDIO",
        3: "VIDEO",
        4: "FILE",
    }

    _NAMES_TO_VALUES = {
        "IMAGE": 0,
        "AUDIO": 1,
        "VIDEO": 3,
        "FILE": 4,
    }


class MessageType(object):
    SIMPLE = 0
    CAROUSEL = 1
    INPUT = 2
    EXTERNAL = 3

    _VALUES_TO_NAMES = {
        0: "SIMPLE",
        1: "CAROUSEL",
        2: "INPUT",
        3: "EXTERNAL",
    }

    _NAMES_TO_VALUES = {
        "SIMPLE": 0,
        "CAROUSEL": 1,
        "INPUT": 2,
        "EXTERNAL": 3,
    }


class InputType(object):
    TEXT = 0
    NUMERIC = 1
    EMAIL = 2
    PHONE = 3
    ADDRESS = 4
    DATE = 5
    TIME = 6
    LOCATION = 7
    MEDIA = 8
    LIST = 9
    OPTIONS = 10

    _VALUES_TO_NAMES = {
        0: "TEXT",
        1: "NUMERIC",
        2: "EMAIL",
        3: "PHONE",
        4: "ADDRESS",
        5: "DATE",
        6: "TIME",
        7: "LOCATION",
        8: "MEDIA",
        9: "LIST",
        10: "OPTIONS",
    }

    _NAMES_TO_VALUES = {
        "TEXT": 0,
        "NUMERIC": 1,
        "EMAIL": 2,
        "PHONE": 3,
        "ADDRESS": 4,
        "DATE": 5,
        "TIME": 6,
        "LOCATION": 7,
        "MEDIA": 8,
        "LIST": 9,
        "OPTIONS": 10,
    }


class Medium(object):
    IOS = 0
    ANDROID = 1
    WINDOWS = 2
    WEB = 3
    FACEBOOK = 4
    TWITTER = 5
    SLACK = 6
    TELEGRAM = 7

    _VALUES_TO_NAMES = {
        0: "IOS",
        1: "ANDROID",
        2: "WINDOWS",
        3: "WEB",
        4: "FACEBOOK",
        5: "TWITTER",
        6: "SLACK",
        7: "TELEGRAM",
    }

    _NAMES_TO_VALUES = {
        "IOS": 0,
        "ANDROID": 1,
        "WINDOWS": 2,
        "WEB": 3,
        "FACEBOOK": 4,
        "TWITTER": 5,
        "SLACK": 6,
        "TELEGRAM": 7,
    }


class ButtonType(object):
    URL = 0
    QUICK_REPLY = 1
    ACTION = 2

    _VALUES_TO_NAMES = {
        0: "URL",
        1: "QUICK_REPLY",
        2: "ACTION",
    }

    _NAMES_TO_VALUES = {
        "URL": 0,
        "QUICK_REPLY": 1,
        "ACTION": 2,
    }


class AddressField(object):
    ADDRESS_LINE_1 = 0
    ADDRESS_LINE_2 = 1
    ADDRESS_LINE_3 = 2
    STREET = 3
    AREA = 4
    CITY = 5
    STATE = 6
    COUNTRY = 7
    PIN = 8

    _VALUES_TO_NAMES = {
        0: "ADDRESS_LINE_1",
        1: "ADDRESS_LINE_2",
        2: "ADDRESS_LINE_3",
        3: "STREET",
        4: "AREA",
        5: "CITY",
        6: "STATE",
        7: "COUNTRY",
        8: "PIN",
    }

    _NAMES_TO_VALUES = {
        "ADDRESS_LINE_1": 0,
        "ADDRESS_LINE_2": 1,
        "ADDRESS_LINE_3": 2,
        "STREET": 3,
        "AREA": 4,
        "CITY": 5,
        "STATE": 6,
        "COUNTRY": 7,
        "PIN": 8,
    }


class EventType(object):
    DISCONNECTED = 0
    CONNECTED = 1
    IDLE = 2
    SESSION_STARTED = 3
    SESSION_CLOSED = 4
    CHAT_ALLOCATION = 5
    CHAT_DEALLOCATION = 6
    MESSAGE_COUNT = 7
    RESPONSE_NEEDED = 8
    ACTIVE = 9
    INACTIVE = 10
    TYPING = 11
    AWAY = 12
    ACK = 13
    NO_AGENT_FOUND = 14
    INTENT_TO_HANDOVER = 15
    INTERACTION = 16
    QUEUED = 17
    PRIORITY_QUEUED = 18
    ALLOCATION_REQUEST = 19
    OUT_OF_BUSINESS_HOURS = 20
    SET_SESSION_DATA = 21
    HANDOVER = 22

    _VALUES_TO_NAMES = {
        0: "DISCONNECTED",
        1: "CONNECTED",
        2: "IDLE",
        3: "SESSION_STARTED",
        4: "SESSION_CLOSED",
        5: "CHAT_ALLOCATION",
        6: "CHAT_DEALLOCATION",
        7: "MESSAGE_COUNT",
        8: "RESPONSE_NEEDED",
        9: "ACTIVE",
        10: "INACTIVE",
        11: "TYPING",
        12: "AWAY",
        13: "ACK",
        14: "NO_AGENT_FOUND",
        15: "INTENT_TO_HANDOVER",
        16: "INTERACTION",
        17: "QUEUED",
        18: "PRIORITY_QUEUED",
        19: "ALLOCATION_REQUEST",
        20: "OUT_OF_BUSINESS_HOURS",
        21: "SET_SESSION_DATA",
        22: "HANDOVER"
    }

    _NAMES_TO_VALUES = {
        "DISCONNECTED": 0,
        "CONNECTED": 1,
        "IDLE": 2,
        "SESSION_STARTED": 3,
        "SESSION_CLOSED": 4,
        "CHAT_ALLOCATION": 5,
        "CHAT_DEALLOCATION": 6,
        "MESSAGE_COUNT": 7,
        "RESPONSE_NEEDED": 8,
        "ACTIVE": 9,
        "INACTIVE": 10,
        "TYPING": 11,
        "AWAY": 12,
        "ACK": 13,
        "NO_AGENT_FOUND": 14,
        "INTENT_TO_HANDOVER": 15,
        "INTERACTION": 16,
        "QUEUED": 17,
        "PRIORITY_QUEUED": 18,
        "ALLOCATION_REQUEST": 19,
        "OUT_OF_BUSINESS_HOURS": 20,
        "SET_SESSION_DATA": 21,
        "HANDOVER": 22
    }


class Date(object):
    """
    Attributes:
     - year
     - month
     - mday
     - wday
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'year', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'month', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'mday', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'wday', 'UTF8', None, ),  # 4
    )

    def __init__(self, year=None, month=None, mday=None, wday=None,):
        self.year = year
        self.month = month
        self.mday = mday
        self.wday = wday

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.year = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.month = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.wday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Date')
        if self.year is not None:
            oprot.writeFieldBegin('year', TType.STRING, 1)
            oprot.writeString(self.year.encode('utf-8') if sys.version_info[0] == 2 else self.year)
            oprot.writeFieldEnd()
        if self.month is not None:
            oprot.writeFieldBegin('month', TType.STRING, 2)
            oprot.writeString(self.month.encode('utf-8') if sys.version_info[0] == 2 else self.month)
            oprot.writeFieldEnd()
        if self.mday is not None:
            oprot.writeFieldBegin('mday', TType.STRING, 3)
            oprot.writeString(self.mday.encode('utf-8') if sys.version_info[0] == 2 else self.mday)
            oprot.writeFieldEnd()
        if self.wday is not None:
            oprot.writeFieldBegin('wday', TType.STRING, 4)
            oprot.writeString(self.wday.encode('utf-8') if sys.version_info[0] == 2 else self.wday)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Time(object):
    """
    Attributes:
     - hour
     - minute
     - second
     - timezone
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'hour', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'minute', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'second', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'timezone', 'UTF8', None, ),  # 4
    )

    def __init__(self, hour=None, minute=None, second=None, timezone=None,):
        self.hour = hour
        self.minute = minute
        self.second = second
        self.timezone = timezone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hour = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.minute = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.second = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.timezone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Time')
        if self.hour is not None:
            oprot.writeFieldBegin('hour', TType.STRING, 1)
            oprot.writeString(self.hour.encode('utf-8') if sys.version_info[0] == 2 else self.hour)
            oprot.writeFieldEnd()
        if self.minute is not None:
            oprot.writeFieldBegin('minute', TType.STRING, 2)
            oprot.writeString(self.minute.encode('utf-8') if sys.version_info[0] == 2 else self.minute)
            oprot.writeFieldEnd()
        if self.second is not None:
            oprot.writeFieldBegin('second', TType.STRING, 3)
            oprot.writeString(self.second.encode('utf-8') if sys.version_info[0] == 2 else self.second)
            oprot.writeFieldEnd()
        if self.timezone is not None:
            oprot.writeFieldBegin('timezone', TType.STRING, 4)
            oprot.writeString(self.timezone.encode('utf-8') if sys.version_info[0] == 2 else self.timezone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DateTime(object):
    """
    Attributes:
     - date
     - time
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'date', (Date, Date.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'time', (Time, Time.thrift_spec), None, ),  # 2
    )

    def __init__(self, date=None, time=None,):
        self.date = date
        self.time = time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.date = Date()
                    self.date.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.time = Time()
                    self.time.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DateTime')
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.STRUCT, 1)
            self.date.write(oprot)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRUCT, 2)
            self.time.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DateRange(object):
    """
    Attributes:
     - min
     - max
     - interval
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'min', (Date, Date.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'max', (Date, Date.thrift_spec), None, ),  # 2
        (3, TType.STRING, 'interval', 'UTF8', None, ),  # 3
    )

    def __init__(self, min=None, max=None, interval=None,):
        self.min = min
        self.max = max
        self.interval = interval

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.min = Date()
                    self.min.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.max = Date()
                    self.max.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.interval = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DateRange')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.STRUCT, 1)
            self.min.write(oprot)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.STRUCT, 2)
            self.max.write(oprot)
            oprot.writeFieldEnd()
        if self.interval is not None:
            oprot.writeFieldBegin('interval', TType.STRING, 3)
            oprot.writeString(self.interval.encode('utf-8') if sys.version_info[0] == 2 else self.interval)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimeRange(object):
    """
    Attributes:
     - min
     - max
     - interval
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'min', (Time, Time.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'max', (Time, Time.thrift_spec), None, ),  # 2
        (3, TType.STRING, 'interval', 'UTF8', None, ),  # 3
    )

    def __init__(self, min=None, max=None, interval=None,):
        self.min = min
        self.max = max
        self.interval = interval

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.min = Time()
                    self.min.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.max = Time()
                    self.max.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.interval = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TimeRange')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.STRUCT, 1)
            self.min.write(oprot)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.STRUCT, 2)
            self.max.write(oprot)
            oprot.writeFieldEnd()
        if self.interval is not None:
            oprot.writeFieldBegin('interval', TType.STRING, 3)
            oprot.writeString(self.interval.encode('utf-8') if sys.version_info[0] == 2 else self.interval)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DateTimeRange(object):
    """
    Attributes:
     - dateRange
     - timeRange
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'dateRange', (DateRange, DateRange.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'timeRange', (TimeRange, TimeRange.thrift_spec), None, ),  # 2
    )

    def __init__(self, dateRange=None, timeRange=None,):
        self.dateRange = dateRange
        self.timeRange = timeRange

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.dateRange = DateRange()
                    self.dateRange.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.timeRange = TimeRange()
                    self.timeRange.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DateTimeRange')
        if self.dateRange is not None:
            oprot.writeFieldBegin('dateRange', TType.STRUCT, 1)
            self.dateRange.write(oprot)
            oprot.writeFieldEnd()
        if self.timeRange is not None:
            oprot.writeFieldBegin('timeRange', TType.STRUCT, 2)
            self.timeRange.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Location(object):
    """
    Attributes:
     - lat
     - lng
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'lat', None, None, ),  # 1
        (2, TType.DOUBLE, 'lng', None, None, ),  # 2
    )

    def __init__(self, lat=None, lng=None,):
        self.lat = lat
        self.lng = lng

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.lat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.lng = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Location')
        if self.lat is not None:
            oprot.writeFieldBegin('lat', TType.DOUBLE, 1)
            oprot.writeDouble(self.lat)
            oprot.writeFieldEnd()
        if self.lng is not None:
            oprot.writeFieldBegin('lng', TType.DOUBLE, 2)
            oprot.writeDouble(self.lng)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Entity(object):
    """
    Attributes:
     - id
     - medium
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.I32, 'medium', None, None, ),  # 2
    )

    def __init__(self, id=None, medium=None,):
        self.id = id
        self.medium = medium

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.medium = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Entity')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.medium is not None:
            oprot.writeFieldBegin('medium', TType.I32, 2)
            oprot.writeI32(self.medium)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageMeta(object):
    """
    Attributes:
     - id
     - sender
     - recipient
     - senderType
     - timestamp
     - sessionId
     - responseTo
     - businessId
     - flowId
     - threadId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'sender', (Entity, Entity.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'recipient', (Entity, Entity.thrift_spec), None, ),  # 3
        (4, TType.I32, 'senderType', None, 0, ),  # 4
        (5, TType.I64, 'timestamp', None, None, ),  # 5
        (6, TType.STRING, 'sessionId', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'responseTo', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'businessId', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'flowId', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'threadId', 'UTF8', None, ),  # 10
    )

    def __init__(self, id=None, sender=None, recipient=None, senderType=thrift_spec[4][4], timestamp=None, sessionId=None, responseTo=None, businessId=None, flowId=None, threadId=None,):
        self.id = id
        self.sender = sender
        self.recipient = recipient
        self.senderType = senderType
        self.timestamp = timestamp
        self.sessionId = sessionId
        self.responseTo = responseTo
        self.businessId = businessId
        self.flowId = flowId
        self.threadId = threadId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sender = Entity()
                    self.sender.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.recipient = Entity()
                    self.recipient.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.senderType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.responseTo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.businessId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.flowId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.threadId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MessageMeta')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.sender is not None:
            oprot.writeFieldBegin('sender', TType.STRUCT, 2)
            self.sender.write(oprot)
            oprot.writeFieldEnd()
        if self.recipient is not None:
            oprot.writeFieldBegin('recipient', TType.STRUCT, 3)
            self.recipient.write(oprot)
            oprot.writeFieldEnd()
        if self.senderType is not None:
            oprot.writeFieldBegin('senderType', TType.I32, 4)
            oprot.writeI32(self.senderType)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 5)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 6)
            oprot.writeString(self.sessionId.encode('utf-8') if sys.version_info[0] == 2 else self.sessionId)
            oprot.writeFieldEnd()
        if self.responseTo is not None:
            oprot.writeFieldBegin('responseTo', TType.STRING, 7)
            oprot.writeString(self.responseTo.encode('utf-8') if sys.version_info[0] == 2 else self.responseTo)
            oprot.writeFieldEnd()
        if self.businessId is not None:
            oprot.writeFieldBegin('businessId', TType.STRING, 8)
            oprot.writeString(self.businessId.encode('utf-8') if sys.version_info[0] == 2 else self.businessId)
            oprot.writeFieldEnd()
        if self.flowId is not None:
            oprot.writeFieldBegin('flowId', TType.STRING, 9)
            oprot.writeString(self.flowId.encode('utf-8') if sys.version_info[0] == 2 else self.flowId)
            oprot.writeFieldEnd()
        if self.threadId is not None:
            oprot.writeFieldBegin('threadId', TType.STRING, 10)
            oprot.writeString(self.threadId.encode('utf-8') if sys.version_info[0] == 2 else self.threadId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sender is None:
            raise TProtocolException(message='Required field sender is unset!')
        if self.recipient is None:
            raise TProtocolException(message='Required field recipient is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Media(object):
    """
    Attributes:
     - url
     - type
     - previewUrl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'url', 'UTF8', None, ),  # 1
        (2, TType.I32, 'type', None, None, ),  # 2
        (3, TType.STRING, 'previewUrl', 'UTF8', None, ),  # 3
    )

    def __init__(self, url=None, type=None, previewUrl=None,):
        self.url = url
        self.type = type
        self.previewUrl = previewUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.previewUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Media')
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 1)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.previewUrl is not None:
            oprot.writeFieldBegin('previewUrl', TType.STRING, 3)
            oprot.writeString(self.previewUrl.encode('utf-8') if sys.version_info[0] == 2 else self.previewUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Option(object):
    """
    Attributes:
     - title
     - value
     - type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
        (3, TType.I32, 'type', None, None, ),  # 3
    )

    def __init__(self, title=None, value=None, type=None,):
        self.title = title
        self.value = value
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Option')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.title is None:
            raise TProtocolException(message='Required field title is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Item(object):
    """
    Attributes:
     - title
     - desc
     - media
     - url
     - options
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'desc', 'UTF8', None, ),  # 2
        (3, TType.STRUCT, 'media', (Media, Media.thrift_spec), None, ),  # 3
        (4, TType.LIST, 'options', (TType.STRUCT, (Option, Option.thrift_spec), False), None, ),  # 4
        (5, TType.STRING, 'url', 'UTF8', None, ),  # 5
    )

    def __init__(self, title=None, desc=None, media=None, url=None, options=None,):
        self.title = title
        self.desc = desc
        self.media = media
        self.url = url
        self.options = options

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.media = Media()
                    self.media.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.options = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Option()
                        _elem5.read(iprot)
                        self.options.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Item')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 2)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        if self.media is not None:
            oprot.writeFieldBegin('media', TType.STRUCT, 3)
            self.media.write(oprot)
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.options))
            for iter6 in self.options:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 5)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Address(object):
    """
    Attributes:
     - line1
     - line2
     - line3
     - street
     - area
     - city
     - state
     - country
     - pin
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'line1', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'line2', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'line3', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'street', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'area', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'city', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'state', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'country', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'pin', 'UTF8', None, ),  # 9
    )

    def __init__(self, line1=None, line2=None, line3=None, street=None, area=None, city=None, state=None, country=None, pin=None,):
        self.line1 = line1
        self.line2 = line2
        self.line3 = line3
        self.street = street
        self.area = area
        self.city = city
        self.state = state
        self.country = country
        self.pin = pin

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.line1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.line2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.line3 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.street = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.area = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.pin = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Address')
        if self.line1 is not None:
            oprot.writeFieldBegin('line1', TType.STRING, 1)
            oprot.writeString(self.line1.encode('utf-8') if sys.version_info[0] == 2 else self.line1)
            oprot.writeFieldEnd()
        if self.line2 is not None:
            oprot.writeFieldBegin('line2', TType.STRING, 2)
            oprot.writeString(self.line2.encode('utf-8') if sys.version_info[0] == 2 else self.line2)
            oprot.writeFieldEnd()
        if self.line3 is not None:
            oprot.writeFieldBegin('line3', TType.STRING, 3)
            oprot.writeString(self.line3.encode('utf-8') if sys.version_info[0] == 2 else self.line3)
            oprot.writeFieldEnd()
        if self.street is not None:
            oprot.writeFieldBegin('street', TType.STRING, 4)
            oprot.writeString(self.street.encode('utf-8') if sys.version_info[0] == 2 else self.street)
            oprot.writeFieldEnd()
        if self.area is not None:
            oprot.writeFieldBegin('area', TType.STRING, 5)
            oprot.writeString(self.area.encode('utf-8') if sys.version_info[0] == 2 else self.area)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 6)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 7)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 8)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.pin is not None:
            oprot.writeFieldBegin('pin', TType.STRING, 9)
            oprot.writeString(self.pin.encode('utf-8') if sys.version_info[0] == 2 else self.pin)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TextInput(object):
    """
    Attributes:
     - multiLine
     - minLength
     - maxLength
     - defaultText
     - placeHolder
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BOOL, 'multiLine', None, None, ),  # 1
        (2, TType.I16, 'minLength', None, None, ),  # 2
        (3, TType.I16, 'maxLength', None, None, ),  # 3
        (4, TType.STRING, 'defaultText', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'placeHolder', 'UTF8', None, ),  # 5
    )

    def __init__(self, multiLine=None, minLength=None, maxLength=None, defaultText=None, placeHolder=None,):
        self.multiLine = multiLine
        self.minLength = minLength
        self.maxLength = maxLength
        self.defaultText = defaultText
        self.placeHolder = placeHolder

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.multiLine = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.minLength = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.maxLength = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.defaultText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.placeHolder = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TextInput')
        if self.multiLine is not None:
            oprot.writeFieldBegin('multiLine', TType.BOOL, 1)
            oprot.writeBool(self.multiLine)
            oprot.writeFieldEnd()
        if self.minLength is not None:
            oprot.writeFieldBegin('minLength', TType.I16, 2)
            oprot.writeI16(self.minLength)
            oprot.writeFieldEnd()
        if self.maxLength is not None:
            oprot.writeFieldBegin('maxLength', TType.I16, 3)
            oprot.writeI16(self.maxLength)
            oprot.writeFieldEnd()
        if self.defaultText is not None:
            oprot.writeFieldBegin('defaultText', TType.STRING, 4)
            oprot.writeString(self.defaultText.encode('utf-8') if sys.version_info[0] == 2 else self.defaultText)
            oprot.writeFieldEnd()
        if self.placeHolder is not None:
            oprot.writeFieldBegin('placeHolder', TType.STRING, 5)
            oprot.writeString(self.placeHolder.encode('utf-8') if sys.version_info[0] == 2 else self.placeHolder)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.multiLine is None:
            raise TProtocolException(message='Required field multiLine is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListItem(object):
    """
    Attributes:
     - text
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'text', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
    )

    def __init__(self, text=None, value=None,):
        self.text = text
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ListItem')
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 1)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.text is None:
            raise TProtocolException(message='Required field text is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Input(object):
    """
    Attributes:
     - val
     - address
     - date
     - time
     - dateTime
     - location
     - media
     - input
     - text
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'val', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'address', (Address, Address.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'date', (Date, Date.thrift_spec), None, ),  # 3
        (4, TType.STRUCT, 'time', (Time, Time.thrift_spec), None, ),  # 4
        (5, TType.STRUCT, 'dateTime', (DateTime, DateTime.thrift_spec), None, ),  # 5
        (6, TType.STRUCT, 'location', (Location, Location.thrift_spec), None, ),  # 6
        (7, TType.LIST, 'media', (TType.STRUCT, (Media, Media.thrift_spec), False), None, ),  # 7
        (8, TType.STRING, 'input', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'text', 'UTF8', None, ),  # 9
    )

    def __init__(self, val=None, address=None, date=None, time=None, dateTime=None, location=None, media=None, input=None, text=None,):
        self.val = val
        self.address = address
        self.date = date
        self.time = time
        self.dateTime = dateTime
        self.location = location
        self.media = media
        self.input = input
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.val = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.address = Address()
                    self.address.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.date = Date()
                    self.date.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.time = Time()
                    self.time.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.dateTime = DateTime()
                    self.dateTime.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.media = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Media()
                        _elem12.read(iprot)
                        self.media.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.input = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Input')
        if self.val is not None:
            oprot.writeFieldBegin('val', TType.STRING, 1)
            oprot.writeString(self.val.encode('utf-8') if sys.version_info[0] == 2 else self.val)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRUCT, 2)
            self.address.write(oprot)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.STRUCT, 3)
            self.date.write(oprot)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRUCT, 4)
            self.time.write(oprot)
            oprot.writeFieldEnd()
        if self.dateTime is not None:
            oprot.writeFieldBegin('dateTime', TType.STRUCT, 5)
            self.dateTime.write(oprot)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 6)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.media is not None:
            oprot.writeFieldBegin('media', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.media))
            for iter13 in self.media:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.input is not None:
            oprot.writeFieldBegin('input', TType.STRING, 8)
            oprot.writeString(self.input.encode('utf-8') if sys.version_info[0] == 2 else self.input)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 9)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageContent(object):
    """
    Attributes:
     - text
     - media
     - title
     - items
     - payload
     - inputType
     - mandatory
     - values
     - multiple
     - mediaType
     - requiredFields
     - options
     - dateRange
     - timeRange
     - dateTimeRange
     - defaultLocation
     - textInputAttr
     - input
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'text', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'media', (Media, Media.thrift_spec), None, ),  # 2
        (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
        (4, TType.LIST, 'items', (TType.STRUCT, (Item, Item.thrift_spec), False), None, ),  # 4
        (5, TType.STRING, 'payload', 'UTF8', None, ),  # 5
        (6, TType.I32, 'inputType', None, None, ),  # 6
        (7, TType.BOOL, 'mandatory', None, True, ),  # 7
        (8, TType.SET, 'values', (TType.STRUCT, (ListItem, ListItem.thrift_spec), False), None, ),  # 8
        (9, TType.BOOL, 'multiple', None, None, ),  # 9
        (10, TType.I32, 'mediaType', None, None, ),  # 10
        (11, TType.SET, 'requiredFields', (TType.STRING, 'UTF8', False), None, ),  # 11
        (12, TType.SET, 'options', (TType.STRUCT, (Option, Option.thrift_spec), False), None, ),  # 12
        (13, TType.STRUCT, 'dateRange', (DateRange, DateRange.thrift_spec), None, ),  # 13
        (14, TType.STRUCT, 'timeRange', (TimeRange, TimeRange.thrift_spec), None, ),  # 14
        (15, TType.STRUCT, 'dateTimeRange', (DateTimeRange, DateTimeRange.thrift_spec), None, ),  # 15
        (16, TType.STRUCT, 'defaultLocation', (Location, Location.thrift_spec), None, ),  # 16
        (17, TType.STRUCT, 'textInputAttr', (TextInput, TextInput.thrift_spec), None, ),  # 17
        (18, TType.STRUCT, 'input', (Input, Input.thrift_spec), None, ),  # 18
    )

    def __init__(self, text=None, media=None, title=None, items=None, payload=None, inputType=None, mandatory=thrift_spec[7][4], values=None, multiple=None, mediaType=None, requiredFields=None, options=None, dateRange=None, timeRange=None, dateTimeRange=None, defaultLocation=None, textInputAttr=None, input=None,):
        self.text = text
        self.media = media
        self.title = title
        self.items = items
        self.payload = payload
        self.inputType = inputType
        self.mandatory = mandatory
        self.values = values
        self.multiple = multiple
        self.mediaType = mediaType
        self.requiredFields = requiredFields
        self.options = options
        self.dateRange = dateRange
        self.timeRange = timeRange
        self.dateTimeRange = dateTimeRange
        self.defaultLocation = defaultLocation
        self.textInputAttr = textInputAttr
        self.input = input

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.media = Media()
                    self.media.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.items = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Item()
                        _elem19.read(iprot)
                        self.items.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.payload = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.inputType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.mandatory = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.SET:
                    self.values = set()
                    (_etype23, _size20) = iprot.readSetBegin()
                    for _i24 in range(_size20):
                        _elem25 = ListItem()
                        _elem25.read(iprot)
                        self.values.add(_elem25)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.multiple = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.mediaType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.SET:
                    self.requiredFields = set()
                    (_etype29, _size26) = iprot.readSetBegin()
                    for _i30 in range(_size26):
                        _elem31 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.requiredFields.add(_elem31)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.SET:
                    self.options = set()
                    (_etype35, _size32) = iprot.readSetBegin()
                    for _i36 in range(_size32):
                        _elem37 = Option()
                        _elem37.read(iprot)
                        self.options.add(_elem37)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.dateRange = DateRange()
                    self.dateRange.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.timeRange = TimeRange()
                    self.timeRange.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.dateTimeRange = DateTimeRange()
                    self.dateTimeRange.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.defaultLocation = Location()
                    self.defaultLocation.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.textInputAttr = TextInput()
                    self.textInputAttr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRUCT:
                    self.input = Input()
                    self.input.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MessageContent')
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 1)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media is not None:
            oprot.writeFieldBegin('media', TType.STRUCT, 2)
            self.media.write(oprot)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for iter38 in self.items:
                iter38.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRING, 5)
            oprot.writeString(self.payload.encode('utf-8') if sys.version_info[0] == 2 else self.payload)
            oprot.writeFieldEnd()
        if self.inputType is not None:
            oprot.writeFieldBegin('inputType', TType.I32, 6)
            oprot.writeI32(self.inputType)
            oprot.writeFieldEnd()
        if self.mandatory is not None:
            oprot.writeFieldBegin('mandatory', TType.BOOL, 7)
            oprot.writeBool(self.mandatory)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.SET, 8)
            oprot.writeSetBegin(TType.STRUCT, len(self.values))
            for iter39 in self.values:
                iter39.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.multiple is not None:
            oprot.writeFieldBegin('multiple', TType.BOOL, 9)
            oprot.writeBool(self.multiple)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.I32, 10)
            oprot.writeI32(self.mediaType)
            oprot.writeFieldEnd()
        if self.requiredFields is not None:
            oprot.writeFieldBegin('requiredFields', TType.SET, 11)
            oprot.writeSetBegin(TType.STRING, len(self.requiredFields))
            for iter40 in self.requiredFields:
                oprot.writeString(iter40.encode('utf-8') if sys.version_info[0] == 2 else iter40)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.options is not None:
            oprot.writeFieldBegin('options', TType.SET, 12)
            oprot.writeSetBegin(TType.STRUCT, len(self.options))
            for iter41 in self.options:
                iter41.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.dateRange is not None:
            oprot.writeFieldBegin('dateRange', TType.STRUCT, 13)
            self.dateRange.write(oprot)
            oprot.writeFieldEnd()
        if self.timeRange is not None:
            oprot.writeFieldBegin('timeRange', TType.STRUCT, 14)
            self.timeRange.write(oprot)
            oprot.writeFieldEnd()
        if self.dateTimeRange is not None:
            oprot.writeFieldBegin('dateTimeRange', TType.STRUCT, 15)
            self.dateTimeRange.write(oprot)
            oprot.writeFieldEnd()
        if self.defaultLocation is not None:
            oprot.writeFieldBegin('defaultLocation', TType.STRUCT, 16)
            self.defaultLocation.write(oprot)
            oprot.writeFieldEnd()
        if self.textInputAttr is not None:
            oprot.writeFieldBegin('textInputAttr', TType.STRUCT, 17)
            self.textInputAttr.write(oprot)
            oprot.writeFieldEnd()
        if self.input is not None:
            oprot.writeFieldBegin('input', TType.STRUCT, 18)
            self.input.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageData(object):
    """
    Attributes:
     - type
     - content
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, None, ),  # 1
        (2, TType.STRUCT, 'content', (MessageContent, MessageContent.thrift_spec), None, ),  # 2
    )

    def __init__(self, type=None, content=None,):
        self.type = type
        self.content = content

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.content = MessageContent()
                    self.content.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MessageData')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRUCT, 2)
            self.content.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.content is None:
            raise TProtocolException(message='Required field content is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Event(object):
    """
    Attributes:
     - type
     - channel
     - unreadCount
     - data
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, None, ),  # 1
        (2, TType.STRING, 'channel', 'UTF8', None, ),  # 2
        (3, TType.I64, 'unreadCount', None, None, ),  # 3
        (4, TType.STRING, 'data', 'UTF8', None, ),  # 4
    )

    def __init__(self, type=None, channel=None, unreadCount=None, data=None,):
        self.type = type
        self.channel = channel
        self.unreadCount = unreadCount
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.channel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.unreadCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Event')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.STRING, 2)
            oprot.writeString(self.channel.encode('utf-8') if sys.version_info[0] == 2 else self.channel)
            oprot.writeFieldEnd()
        if self.unreadCount is not None:
            oprot.writeFieldBegin('unreadCount', TType.I64, 3)
            oprot.writeI64(self.unreadCount)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 4)
            oprot.writeString(self.data.encode('utf-8') if sys.version_info[0] == 2 else self.data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Message(object):
    """
    Attributes:
     - meta
     - data
     - events
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'meta', (MessageMeta, MessageMeta.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'data', (MessageData, MessageData.thrift_spec), None, ),  # 2
        (3, TType.LIST, 'events', (TType.STRUCT, (Event, Event.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, meta=None, data=None, events=None,):
        self.meta = meta
        self.data = data
        self.events = events

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.meta = MessageMeta()
                    self.meta.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.data = MessageData()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.events = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = Event()
                        _elem47.read(iprot)
                        self.events.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Message')
        if self.meta is not None:
            oprot.writeFieldBegin('meta', TType.STRUCT, 1)
            self.meta.write(oprot)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 2)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        if self.events is not None:
            oprot.writeFieldBegin('events', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.events))
            for iter48 in self.events:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.meta is None:
            raise TProtocolException(message='Required field meta is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
